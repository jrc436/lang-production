/* Generated By:JJTree&JavaCC: Do not edit this line. CCGbankDerivation.java */
package opennlp.ccgbank.parse;

import java.util.*;
import org.apache.tools.ant.Task;
//import java.io.*;

public class CCGbankDerivation/*@bgen(jjtree)*/implements CCGbankDerivationTreeConstants, CCGbankDerivationConstants {/*@bgen(jjtree)*/
  protected static JJTCCGbankDerivationState jjtree = new JJTCCGbankDerivationState();
    // The java code to operate the node scope hook
    static void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).first_token = getToken(1);
    }

    static void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode)n).last_token = getToken(0);
    }

  static final public SimpleNode start() throws ParseException {
 /*@bgen(jjtree) start */
  start jjtn000 = new start(null, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        header();
        if (jj_2_1(2)) {
          leafnode();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            treenode();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOMCAT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void header() throws ParseException {
 /*@bgen(jjtree) header */
    header jjtn000 = new header(null, JJTHEADER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t1 = new Token();
    Token t2 = new Token();
    Token t3 = new Token();
    jjtn000.type="Header";
    try {
      // Header, eg: ID=wsj_2300.1 PARSER=GOLD NUMPARSE=1
          t1 = jj_consume_token(ATOMCAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOMCAT:
        t2 = jj_consume_token(ATOMCAT);
        t3 = jj_consume_token(ATOMCAT);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.header = t1.image + " " + t2.image + " " + t3.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void treenode() throws ParseException {
 /*@bgen(jjtree) treenode */
    treenode jjtn000 = new treenode(null, JJTTREENODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token leftover = new Token();
    Token head = new Token();
    Token dtr = new Token();
    Token lex = new Token();
    Token sense = new Token();
    Token role = new Token();
    jjtn000.type="Treenode";
    try {
      jj_consume_token(17);
      jj_consume_token(18);
      catSpecRedundant();
      if (jj_2_2(3)) {
        leftover = jj_consume_token(ATOMCAT);
        head = jj_consume_token(ATOMCAT);
        dtr = jj_consume_token(ATOMCAT);
                  jjtn000.leftover=leftover.image;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOMCAT:
          head = jj_consume_token(ATOMCAT);
          dtr = jj_consume_token(ATOMCAT);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
              jjtn000.head=head.image; jjtn000.dtr=dtr.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        jj_consume_token(LCURLY);
        lex = jj_consume_token(ALPHNUMHYPH);
        jj_consume_token(DOT);
        sense = jj_consume_token(ALPHNUMHYPH);
        jj_consume_token(COLON);
        role = jj_consume_token(ALPHNUMHYPH);
                        jjtn000.nodeRoles = new ArrayList<SimpleNode.LexSenseRole>(3);
                        jjtn000.nodeRoles.add(new SimpleNode.LexSenseRole(lex.image, sense.image, role.image));
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          lex = jj_consume_token(ALPHNUMHYPH);
          jj_consume_token(DOT);
          sense = jj_consume_token(ALPHNUMHYPH);
          jj_consume_token(COLON);
          role = jj_consume_token(ALPHNUMHYPH);
                              jjtn000.nodeRoles.add(new SimpleNode.LexSenseRole(lex.image, sense.image, role.image));
        }
        jj_consume_token(RCURLY);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RANGLE);
      label_3:
      while (true) {
        if (jj_2_3(2)) {
          leafnode();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            treenode();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(19);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void leafnode() throws ParseException {
 /*@bgen(jjtree) leafnode */
    leafnode jjtn000 = new leafnode(null, JJTLEAFNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t = new Token();
    Token lex = new Token();
    Token sense = new Token();
    Token role = new Token();
    jjtn000.type="Leafnode";
    try {
      jj_consume_token(17);
      jj_consume_token(20);
      catSpecRedundant();
      //((S[b]\NP)/NP)/    mww: huh?
      
                  // POS tag stored in a SimpleNode DS
                  t = jj_consume_token(ATOMCAT);
                          jjtn000.pos = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(ATOMCAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOMCAT:
        t = jj_consume_token(ATOMCAT);
        break;
      case SPL:
        t = jj_consume_token(SPL);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
              jjtn000.lex = t.image;
      catSpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        jj_consume_token(LCURLY);
        lex = jj_consume_token(ALPHNUMHYPH);
        jj_consume_token(DOT);
        sense = jj_consume_token(ALPHNUMHYPH);
        jj_consume_token(COLON);
        role = jj_consume_token(ALPHNUMHYPH);
                        jjtn000.nodeRoles = new ArrayList<SimpleNode.LexSenseRole>(3);
                        jjtn000.nodeRoles.add(new SimpleNode.LexSenseRole(lex.image, sense.image, role.image));
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          lex = jj_consume_token(ALPHNUMHYPH);
          jj_consume_token(DOT);
          sense = jj_consume_token(ALPHNUMHYPH);
          jj_consume_token(COLON);
          role = jj_consume_token(ALPHNUMHYPH);
                              jjtn000.nodeRoles.add(new SimpleNode.LexSenseRole(lex.image, sense.image, role.image));
        }
        jj_consume_token(RCURLY);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
        jj_consume_token(LSQUARE);
        role = jj_consume_token(ALPHNUMHYPH);
                        jjtn000.argRoles = new ArrayList<String>(4);
                        jjtn000.argRoles.add(role.image);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          role = jj_consume_token(ALPHNUMHYPH);
                          jjtn000.argRoles.add(role.image);
        }
        jj_consume_token(RSQUARE);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RANGLE);
      jj_consume_token(19);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void catSpec() throws ParseException {
 /*@bgen(jjtree) catSpec */
  catSpec jjtn000 = new catSpec(null, JJTCATSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);jjtn000.type="complexcat";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        catSpec();
        jj_consume_token(19);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOMCAT:
          jj_consume_token(ATOMCAT);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case ATOMCAT:
        atomcat();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        op();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          jj_consume_token(17);
          catSpec();
          jj_consume_token(19);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOMCAT:
            jj_consume_token(ATOMCAT);
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          break;
        case ATOMCAT:
          atomcat();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void catSpecRedundant() throws ParseException {
 /*@bgen(jjtree) catSpecRedundant */
  catSpecRedundant jjtn000 = new catSpecRedundant(null, JJTCATSPECREDUNDANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);jjtn000.type="Redundant";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        catSpec();
        jj_consume_token(19);
        break;
      case ATOMCAT:
        atomcat();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        op();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          jj_consume_token(17);
          catSpec();
          jj_consume_token(19);
          break;
        case ATOMCAT:
          atomcat();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void atomcat() throws ParseException {
 /*@bgen(jjtree) atomcat */
  atomcat jjtn000 = new atomcat(null, JJTATOMCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);jjtn000.type="atomcat";
    try {
      jj_consume_token(ATOMCAT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final public void op() throws ParseException {
 /*@bgen(jjtree) op */
  op jjtn000 = new op(null, JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t = new Token(); jjtn000.type="op";
    try {
      t = jj_consume_token(OP);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtreeCloseNodeScope(jjtn000);
             jjtn000.cat=t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static final private boolean jj_3R_6() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(ATOMCAT)) return true;
    if (jj_scan_token(ATOMCAT)) return true;
    if (jj_scan_token(ATOMCAT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public CCGbankDerivationTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20000,0x400,0x400,0x400,0x8,0x2,0x20000,0x20000,0x20000,0x80000,0x1400,0x8,0x2,0x8,0x100,0x400,0x20400,0x400,0x20400,0x800,0x20400,0x20400,0x800,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public CCGbankDerivation(java.io.InputStream stream) {
     this(stream, null);
  }
  public CCGbankDerivation(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCGbankDerivationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CCGbankDerivation(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCGbankDerivationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CCGbankDerivation(CCGbankDerivationTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CCGbankDerivationTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[21];
    for (int i = 0; i < 21; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
