<?xml version="1.0" encoding="UTF-8"?>
  <actr>
 <model name="Unit1 Addition" version="6">
  <!--
    the modules section allows you to specify what modules you
    want included in this model. Modules not included aren't even
    loaded, the fewer the modules, the faster the model will execute.
    Each module has a set of parameters which are excluded here for
    brevity. The first two are the bare minimum, but you'll be hard
    pressed to write a model without goals or retrievals.
 
    The latencyFactor below has been set to 0.05 to be consistent
    with the Lisp tutorial. It just makes the retrievals complete
    really fast.
    -->
  <modules>
   <module class="org.jactr.core.module.declarative.six.DefaultDeclarativeModule6"/>
   <module class="org.jactr.core.module.procedural.six.DefaultProceduralModule6"/>
   <module class="org.jactr.core.module.goal.six.DefaultGoalModule6"/>
   <module class="org.jactr.core.module.retrieval.six.DefaultRetrievalModule6">
    <parameters>
     <parameter name="LatencyFactor" value="0.05"/>
    </parameters>
   </module>
  </modules>
 

    <!--
   the declarative memory section contains chunk and chunktype definitions.
      -->
  <declarative-memory>
 

    <!--
      the goal of this model, to add two numbers. this is equivalent to
 
      lisp : (chunk-type add arg1 arg2 sum count)
      -->
   <chunk-type name="add">
    <slot name="arg1" equals="null"/>
    <slot name="arg2" equals="nil"/>
    <slot name="count" equals="nil"/>
    <slot name="sum" equals="nil"/>
   </chunk-type>

    <!--
      chunks that support the add goal
 
      lisp : (chunk-type count-order first second)
      -->
   <chunk-type name="count-order">
    <slot name="first" equals="nil"/>
    <slot name="second" equals="nil"/>
   </chunk-type>


      <!--
       the first goal to be used. it is inserted into the buffer towards
       the end of the model
 
       lisp :  (add-dm   (second-goal ISA add arg1 5 arg2 2))
      -->
   <chunk name="second-goal" type="add">
    <slot name="arg1" equals="1"/>
    <slot name="arg2" equals="9"/>
    <slot name="count" equals="nil"/>
    <slot name="sum" equals="nil"/>
   </chunk>

 
      <!--
       this is all the counting chunks that are needed to perform the goal
 
       lisp: (add-dm
   (a ISA count-order first 0 second 1)
   (b ISA count-order first 1 second 2)
   (c ISA count-order first 2 second 3)
   (d ISA count-order first 3 second 4)
   (e ISA count-order first 4 second 5)
   (f ISA count-order first 5 second 6)
   (g ISA count-order first 6 second 7)
   (h ISA count-order first 7 second 8)
   (i ISA count-order first 8 second 9)
   (j ISA count-order first 9 second 10))
      -->
   <chunk name="a" type="count-order">
    <slot name="first" equals="0.0"/>
    <slot name="second" equals="1.0"/>
   </chunk>

   <chunk name="b" type="count-order">
    <slot name="first" equals="1.0"/>
    <slot name="second" equals="2.0"/>
   </chunk>

   <chunk name="c" type="count-order">
    <slot name="first" equals="2.0"/>
    <slot name="second" equals="3.0"/>
   </chunk>

   <chunk name="d" type="count-order">
    <slot name="first" equals="3.0"/>
    <slot name="second" equals="4.0"/>
   </chunk>

   <chunk name="e" type="count-order">
    <slot name="first" equals="4.0"/>
    <slot name="second" equals="5.0"/>
   </chunk>

   <chunk name="f" type="count-order">
    <slot name="first" equals="5.0"/>
    <slot name="second" equals="6.0"/>
   </chunk>
 
   <chunk name="g" type="count-order">
    <slot name="first" equals="6.0"/>
    <slot name="second" equals="7.0"/>
   </chunk>

   <chunk name="h" type="count-order">
    <slot name="first" equals="7.0"/>
    <slot name="second" equals="8.0"/>
   </chunk>

   <chunk name="i" type="count-order">
    <slot name="first" equals="8.0"/>
    <slot name="second" equals="9.0"/>
   </chunk>

   <chunk name="j" type="count-order">
    <slot name="first" equals="9.0"/>
    <slot name="second" equals="10.0"/>
   </chunk>

  </declarative-memory>
 
    <!--
     procedural memory contains all the productions
    -->
  <procedural-memory>
 
     <!--
     initialize-addition starts the model off by launching
     a retrieval. Note how we query the retrieval buffer to
     be sure it is free to access.
 
     lisp : (P initialize-addition
   =goal>
      ISA         add
      arg1        =num1
      arg2        =num2
      sum         nil
==>
   =goal>
      sum         =num1
      count       0
   +retrieval>
      isa        count-order
      first      =num1
)
      -->
   <production name="initialize-addition">
    <conditions>
     <match buffer="goal" type="add">
      <slot name="arg1" equals="=num1"/>
      <slot name="arg2" equals="=num2"/>
      <slot name="sum" equals="nil"/>
     </match>
     <query buffer="retrieval">
      <slot name="state" equals="free"/>
     </query>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="count" equals="0.0"/>
      <slot name="sum" equals="=num1"/>
     </modify>
     <add buffer="retrieval" type="count-order">
      <slot name="first" equals="=num1"/>
     </add>
    </actions>
   </production>
 
      <!--
       after all has processed, we will have the answer
       lisp :
(P terminate-addition
   =goal>
      ISA         add
      count       =num
      arg2        =num
      sum         =answer
==>
   =goal>
      count nil
)
      -->
   <production name="terminate-addition">
    <conditions>
     <match buffer="goal" type="add">
      <slot name="arg1" equals="=num1"/>
      <slot name="arg2" equals="=num2"/>
      <slot name="count" equals="=num2"/>
      <slot name="sum" equals="=answer"/>
     </match>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="count" equals="nil"/>
     </modify>
     <output>"=num1 + =num2 is =answer"</output>
    </actions>
   </production>
 
     <!--
       increment-count and increment-sum work in concert
       with each other, scaffolding the next until terminate
       can be reached.
 
       Note: unlike the lisp example, we do check to make sure
       that the retrieval module is not busy. It's not strictly
       necessary, but always good to make sure you are free before
       making a request
 
       lisp :
(P increment-count
   =goal>
      ISA         add
      sum         =sum
      count       =count
   =retrieval>
      ISA         count-order
      first       =count
      second      =newcount
==>
   =goal>
      count       =newcount
   +retrieval>
      isa        count-order
      first      =sum
)
     -->
   <production name="increment-count">
    <conditions>
     <match buffer="goal" type="add">
      <slot name="sum" equals="=sum"/>
      <slot name="count" equals="=count"/>
     </match>
     <match buffer="retrieval" type="count-order">
      <slot name="first" equals="=count"/>
      <slot name="second" equals="=newCount"/>
     </match>
     <query buffer="retrieval">
      <slot name="state" equals="free"/>
     </query>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="count" equals="=newCount"/>
     </modify>
     <add buffer="retrieval" type="count-order">
      <slot name="first" equals="=sum"/>
     </add>
     <output>"That was the =newCount finger"</output>
    </actions>
   </production>

 
 
     <!--
      increment the sum. This time, instead of checking the
      retrieval state in a separate query, we are using the blended
      match with a :slotName (:state). :slotNames are treated as if
      they were in a query.
 
      lisp:
(P increment-sum
   =goal>
      ISA         add
      sum         =sum
      count       =count
    - arg2        =count
   =retrieval>
      ISA         count-order
      first       =sum
      second      =newsum
==>
   =goal>
      sum         =newsum
   +retrieval>
      isa        count-order
      first      =count
)
      -->
   <production name="increment-sum">
    <conditions>
     <match buffer="goal" type="add">
      <slot name="sum" equals="=sum"/>
      <slot name="count" equals="=count"/>
      <slot name="arg2" not="=count"/>
     </match>
     <match buffer="retrieval" type="count-order">
      <slot name="first" equals="=sum"/>
      <slot name="second" equals="=newSum"/>
      <slot name=":state" equals="free"/>
     </match>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="sum" equals="=newSum"/>
     </modify>
     <add buffer="retrieval" type="count-order">
      <slot name="first" equals="=count"/>
     </add>
     <output>"=newSum"</output>
    </actions>
   </production>
 
 
 
  </procedural-memory>
 
 
   <!--
    outside of the procedural memory section, we have the buffers
    where you can set buffer parameters or contents.
    -->
  <buffer name="goal" chunk="second-goal"/>
 
  <buffer name="retrieval">
   <parameters>
    <parameter name="StrictHarvestingEnabled" value="true"/>
   </parameters>
  </buffer>
 
   <!--
    these are model parameters. cycle skipping allows the model to
    fast-forward through time if it can't fire a production to the
    next event that may permit production firing.
 
    peristent execution controls whether or not the model will quit
    once the goal buffer is empty. It's much easier to set this to
    true than to artificially force the model to keep running by
    queueing spurious events
    -->
  <parameters>
   <parameter name="EnableUnusedCycleSkipping" value="true"/>
   <parameter name="EnablePersistentExecution" value="false"/>
  </parameters>
 </model>
  </actr>
