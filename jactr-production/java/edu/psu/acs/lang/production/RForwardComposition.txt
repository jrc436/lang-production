//package edu.psu.acs.lang.production;
//
//import java.util.ArrayList;
//import java.util.List;
//
//import edu.psu.acs.lang.declarative.CCGOperator;
//import edu.psu.acs.lang.declarative.CCGOperatorEnum;
//import edu.psu.acs.lang.declarative.CCGTypeSlot;
//import edu.psu.acs.lang.declarative.ChunkTypeEnum;
//import edu.psu.acs.lang.declarative.NullValue;
//import edu.psu.acs.lang.declarative.SSlotName;
//import edu.psu.acs.lang.declarative.SSlotNameEnum;
//import edu.psu.acs.lang.declarative.Slot;
//import edu.psu.acs.lang.declarative.SlotVar;
//
//public class RForwardComposition extends SyntaxRule {
//
//	public RForwardComposition(int cueNum, int cueTypeNum, int maxtypes, int maxwords) {
//		super(SyntaxRuleType.RForwardComposition, cueNum, cueTypeNum, maxwords, maxtypes);
//		//We'll let this = Y/Z and cue = X/Y, so X/Y B> Y/Z = X/Z
//		String rightslot = "Z";
//		String leftslotRightCue = "Y";
//		String cueLeft = "X";
//		String word = "word";
//		
//		List<Slot> goalPrecond = new ArrayList<Slot>();
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.RightFullType), new SlotVar(rightslot)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LeftFullType), new SlotVar(leftslotRightCue)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.Combinator), new CCGOperator(CCGOperatorEnum.Slash)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynCombo, cueNum, maxwords, cueTypeNum, maxtypes), new CCGOperator(CCGOperatorEnum.Slash)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynRightType, cueNum, maxwords, cueTypeNum, maxtypes), new SlotVar(leftslotRightCue)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynLeftType, cueNum, maxwords, cueTypeNum, maxtypes), new SlotVar(cueLeft)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynString, cueNum, maxwords), new SlotVar(word)));
//
//		super.conditions.add(new BufferConditions(Buffer.goal, ChunkTypeEnum.sentence, goalPrecond));
//		super.conditions.add(BufferQueries.checkRetrievalEmpty());
//		
//		List<Slot> goalmod = new ArrayList<Slot>();
//		goalmod.add(new Slot(new SSlotName(SSlotNameEnum.FullType), new NullValue()));
//		goalmod.add(new Slot(new SSlotName(SSlotNameEnum.LeftFullType), new SlotVar(cueLeft)));
//		goalmod.addAll(SyntaxRule.wipeOut(cueNum, maxwords, maxtypes));
//		super.effects.add(BufferEffects.modifyGoal(goalmod));
//		
//		List<Slot> makeret = new ArrayList<Slot>();
//		makeret.add(new Slot(CCGTypeSlot.LeftType, new SlotVar(cueLeft)));
//		makeret.add(new Slot(CCGTypeSlot.RightType, new SlotVar(rightslot)));
//		makeret.add(new Slot(CCGTypeSlot.Combinator, new CCGOperator(CCGOperatorEnum.Slash)));
//		super.effects.add(BufferEffects.makeRetrieval(ChunkTypeEnum.CCGType, makeret));
//		
//		super.outputs.add(new SlotVar(word).toString()+" was added to the left");
//	}
//}