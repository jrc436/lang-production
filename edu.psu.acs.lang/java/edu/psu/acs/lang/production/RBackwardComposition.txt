//package edu.psu.acs.lang.production;
//
//import java.util.ArrayList;
//import java.util.List;
//
//import edu.psu.acs.lang.declarative.CCGOperator;
//import edu.psu.acs.lang.declarative.CCGOperatorEnum;
//import edu.psu.acs.lang.declarative.CCGTypeSlot;
//import edu.psu.acs.lang.declarative.ChunkTypeEnum;
//import edu.psu.acs.lang.declarative.NullValue;
//import edu.psu.acs.lang.declarative.SSlotName;
//import edu.psu.acs.lang.declarative.SSlotNameEnum;
//import edu.psu.acs.lang.declarative.Slot;
//import edu.psu.acs.lang.declarative.SlotVar;
//
//public class RBackwardComposition extends SyntaxRule {
//
//	public RBackwardComposition(int cueNum, int cueTypeNum, int maxTypes, int maxwords) {
//		super(SyntaxRuleType.RBackwardComposition, cueNum, cueTypeNum, maxwords, maxTypes);
//		//this one is X\Y, the other is Y\Z, so Y\Z B< X\Y = X\Z
//		String leftfull = "X";
//		String rightfullcueLeft = "Y"; //also cue right
//		String cueRight = "Z";
//		String word = "word";
//		
//		List<Slot> goalprecond = new ArrayList<Slot>();
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.RightFullType), new SlotVar(rightfullcueLeft)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.LeftFullType), new SlotVar(leftfull)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.Combinator), new CCGOperator(CCGOperatorEnum.Backslash)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynCombo, cueNum, maxwords, cueTypeNum, maxTypes), new CCGOperator(CCGOperatorEnum.Backslash)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynLeftType, cueNum, maxwords, cueTypeNum, maxTypes), new SlotVar(rightfullcueLeft)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynRightType, cueNum, maxwords, cueTypeNum, maxTypes), new SlotVar(cueRight)));
//		goalprecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynString, cueNum, maxwords), new SlotVar(word)));
//		super.conditions.add(new BufferConditions(Buffer.goal, ChunkTypeEnum.sentence, goalprecond));
//		super.conditions.add(BufferQueries.checkRetrievalEmpty());
//		
//		List<Slot> goalmod = new ArrayList<Slot>();
//		goalmod.add(new Slot(new SSlotName(SSlotNameEnum.FullType), new NullValue()));
//		goalmod.add(new Slot(new SSlotName(SSlotNameEnum.RightFullType), new SlotVar(cueRight)));
//		//goalmod.add(new Slot(new SSlotName(SSlotNameEnum.State), new GoalState(GoalStateEnum.RetrievedRule)));
//		goalmod.addAll(SyntaxRule.wipeOut(cueNum, maxwords, maxTypes));
//		super.effects.add(BufferEffects.modifyGoal(goalmod));
//		
//		List<Slot> makeret = new ArrayList<Slot>();
//		makeret.add(new Slot(CCGTypeSlot.RightType, new SlotVar(cueRight)));
//		makeret.add(new Slot(CCGTypeSlot.LeftType, new SlotVar(leftfull)));
//		makeret.add(new Slot(CCGTypeSlot.Combinator, new CCGOperator(CCGOperatorEnum.Backslash)));
//		super.effects.add(BufferEffects.makeRetrieval(ChunkTypeEnum.CCGType, makeret));
//		
//		super.outputs.add(new SlotVar(word).toString()+" was added to the right");
//		
//	}
//
//}
