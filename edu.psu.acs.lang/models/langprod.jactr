<actr>
 <model name="t">
<!--
    the modules section allows you to specify what modules you
    want included in this model. Modules not included aren't even
    loaded, the fewer the modules, the faster the model will execute.
    Each module has a set of parameters which are excluded here for
    brevity. The first two are the bare minimum, but you'll be hard
    pressed to write a model without goals or retrievals.
 
    The latencyFactor below has been set to 0.05 to be consistent
    with the Lisp tutorial. It just makes the retrievals complete
    really fast.
    -->
  <modules>
   <module class="org.jactr.core.module.declarative.six.DefaultDeclarativeModule6"/>
   <module class="org.jactr.core.module.procedural.six.DefaultProceduralModule6"/>
   <module class="org.jactr.core.module.goal.six.DefaultGoalModule6"/>
   <module class="org.jactr.core.module.retrieval.six.DefaultRetrievalModule6">
    <parameters>
     <parameter name="LatencyFactor" value="0.05"/>
    </parameters>
   </module>
  </modules>

   <!--
     the declarative memory section contains chunk and chunktype definitions.
    -->
  <declarative-memory>
    <!--
      count order supports counting on your fingers
      lisp : (chunk-type count-order first second)
      -->
   <chunk-type name="make-lex-syn-arg-order">
    <slot name="for-lexeme" equals="nil"/>
    <slot name="for-syn" equals="nil"/>
   </chunk-type>

   <!--
      count-from is our basic goal.
      lisp : (chunk-type count-from start end count)
      -->
   <chunk-type name="make-lexeme">
    <slot name="sem" equals="nil"/>
    <slot name="syn" equals="nil"/>
    <slot name="lex" equals ="nil"/>
   </chunk-type>
   
   <chunk-type name="syntype">
   	<slot name="comb" equals="nil"/>
   	<slot name="left" equals="nil"/>
   	<slot name="right" equals="nil"/>
   	<slot name="attract" equals="nil"/>
   	<slot name="ccgbank-type" equals="nil"/>
   </chunk-type>
   
   <chunk-type name="synsem">
    <slot name="state" equals="nil"/>
    <slot name="class" equals="nil"/>
    <slot name="role" equals ="nil"/>
    
    <slot name="functor" equals="nil"/>
    <slot name="functor-lexform" equals="nil"/>
    <slot name="functor-synform" equals ="nil"/>
    <slot name="functor-sfcform" equals="nil"/>
    <slot name="functor-argorder" equals="nil"/>
    <slot name="functor-role" equals ="nil"/>
    <slot name="functor-done" equals="nil"/>
    
    <slot name="agent" equals="nil"/>
    <slot name="agent-lexform" equals ="nil"/>
    <slot name="agent-role" equals="nil"/>
    <slot name="agent-done" equals="nil"/>
    
    <slot name="theme" equals ="nil"/>
    <slot name="theme-lexform" equals="nil"/>
    <slot name="theme-role" equals="nil"/>
    <slot name="theme-done" equals ="nil"/>
    
    <slot name="goalrole" equals="nil"/>
    <slot name="goalrole-lexform" equals="nil"/>
    <slot name="goalrole-role" equals ="nil"/>
    <slot name="goalrole-done" equals="nil"/>
    
    <slot name="context-type" equals ="nil"/>
    <slot name="context-type-left" equals ="nil"/>
    <slot name="context-type-comb" equals ="nil"/>
    <slot name="context-type-right" equals ="nil"/>
    
    <slot name="type-cat" equals ="nil"/>
    <slot name="type-left" equals ="nil"/>
    <slot name="type-comb" equals ="nil"/>
    <slot name="type-right" equals ="nil"/>
    
    <slot name="lex" equals="nil"/>
    
    <slot name="attract" equals="nil"/>
    <slot name="attract-lexform" equals="nil"/>
    
    <slot name="stacked-context-type" equals="nil"/>
    <slot name="stacked-context-type-left" equals="nil"/>
    <slot name="stacked-context-type-comb" equals="nil"/>
    <slot name="stacked-context-type-right" equals="nil"/>
    
    <slot name="current-sem" equals="nil"/>
    <slot name="current-sem2" equals="nil"/>
    <slot name="current-sem3" equals="nil"/>
    
    <slot name="preferred-predicate" equals="nil"/>
   </chunk-type>
   
   <chunk-type name="lex-syn-arg-order">
    <slot name="for-lexeme" equals="nil"/>
    <slot name="for-syn" equals="nil"/>
   </chunk-type>
   
   <chunk-type name="themerole">
   	<slot name="slot" equals="nil"/>
   	<slot name="marker" equals="nil"/>
   	<slot name="marker done" equals="nil"/>
   	<slot name="lexform" equals="nil"/>
   </chunk-type>
   
   <chunk-type name="combination">
   	<slot name="left" equals="nil"/>
   	<slot name="left-comb" equals="nil"/>
   	<slot name="left-left" equals="nil"/>
   	<slot name="left-right" equals="nil"/>
   	<slot name="right" equals="nil"/>
   	<slot name="right-comb" equals="nil"/>
   	<slot name="right-left" equals="nil"/>
   	<slot name="right-right" equals="nil"/>
   	<slot name="comb" equals="nil"/>
   	<slot name="result" equals="nil"/>
   </chunk-type>
 
    <!--
Actual chunks used in declarative memory will be created programmatically (see Verb)
      -->
  </declarative-memory>
 
  <!--
     procedural memory contains all the productions
    -->
  <procedural-memory>
 
 
 
    <!--
      lisp :
(p start
   =goal>
      ISA         count-from
      start       =num1
      count       nil
 ==>
   =goal>
      count       =num1
   +retrieval>
      ISA         count-order
      first       =num1
)
      -->
   <production name="start">
    <conditions>
     <match buffer="goal" type="count-from">
      <slot name="start" equals="=num1"/>
      <slot name="count" equals="nil"/>
     </match>
          <!-- for completeness, I am checking that retrieval is free unlike the lisp -->
     <query buffer="retrieval">
      <slot name="state" equals="free"/>
     </query>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="count" equals="=num1"/>
     </modify>
     <add buffer="retrieval" type="count-order">
      <slot name="first" equals="=num1"/>
     </add>
     <output>"Searching for something starting at =num1"</output>
    </actions>
   </production>

 <!-- failed isn't included in the lisp, but its always good
      to model defensively in case of retrieval failures
      -->
   <production name="failed">
    <conditions>
     <match buffer="goal" type="count-from">
      <slot name="start" equals="=num"/>
      <slot name="count" equals="=num"/>
     </match>
     <query buffer="retrieval">
      <slot name="state" equals="error"/>
     </query>
    </conditions>
    <actions>
     <remove buffer="goal"/>
     <remove buffer="retrieval"/>
     <output> "Awh crap, I can't retrieve anything starting with =num "</output>
    </actions>
   </production>
<!--
 lisp :
 (P increment
   =goal>
      ISA         count-from
      count       =num1
    - end         =num1
   =retrieval>
      ISA         count-order
      first       =num1
      second      =num2
 ==>
   =goal>
      count       =num2
   +retrieval>
      ISA         count-order
      first       =num2
   !output!       (=num1)
)
      -->
   <production name="increment">
    <conditions>
     <match buffer="goal" type="count-from">
      <slot name="count" equals="=num1"/>
      <slot name="end" not="=num1"/>
     </match>
     <match buffer="retrieval" type="count-order">
      <slot name="first" equals="=num1"/>
      <slot name="second" equals="=num2"/>
     </match>
    </conditions>
    <actions>
     <modify buffer="goal">
      <slot name="count" equals="=num2"/>
     </modify>
     <add buffer="retrieval" type="count-order">
      <slot name="first" equals="=num2"/>
     </add>
     <output>"=num1"</output>
    </actions>
   </production>

<!--
  lisp :
(P stop
   =goal>
      ISA         count-from
      count       =num
      end         =num
 ==>
   -goal>
   !output!       (=num)

)
     -->
   <production name="stop">
    <conditions>
     <match buffer="goal" type="count-from">
      <slot name="end" equals="=num"/>
      <slot name="count" equals="=num"/>
     </match>
    </conditions>
    <actions>
     <remove buffer="goal"/>
     <output>"Answer =num"</output>
    </actions>
   </production>
 
 
 
 
  </procedural-memory>
 
 <!--
    outside of the procedural memory section, we have the buffers
    where you can set buffer parameters or contents.
    -->
  <buffer name="goal" chunk="first-goal"/>
 
    <!--
    these are model parameters. cycle skipping allows the model to
    fast-forward through time if it can't fire a production to the
    next event that may permit production firing.
 
    peristent execution controls whether or not the model will quit
    once the goal buffer is empty. It's much easier to set this to
    true than to artificially force the model to keep running by
    queueing spurious events
    -->
  <parameters>
   <parameter name="EnableUnusedCycleSkipping" value="true"/>
   <parameter name="EnablePersistentExecution" value="false"/>
  </parameters>
 </model>
 </actr>