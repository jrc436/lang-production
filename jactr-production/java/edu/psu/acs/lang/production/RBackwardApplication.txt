//package edu.psu.acs.lang.production;
//
//import java.util.ArrayList;
//import java.util.List;
//
//import edu.psu.acs.lang.declarative.CCGOperator;
//import edu.psu.acs.lang.declarative.CCGOperatorEnum;
//import edu.psu.acs.lang.declarative.CCGTypeSlot;
//import edu.psu.acs.lang.declarative.ChunkTypeEnum;
//import edu.psu.acs.lang.declarative.NullValue;
//import edu.psu.acs.lang.declarative.SSlotName;
//import edu.psu.acs.lang.declarative.SSlotNameEnum;
//import edu.psu.acs.lang.declarative.Slot;
//import edu.psu.acs.lang.declarative.SlotVar;
//
///**
// * See RForwardApplication for a description of why this is necessary
// * @author jrc
// *
// */
//public class RBackwardApplication extends SyntaxRule {
//	public RBackwardApplication(int cueNum, int cueTypeNum, int maxTypes, int maxNumWords) {
//		super(SyntaxRuleType.RBackwardApplication, cueNum, cueTypeNum, maxNumWords, maxTypes);
//		String word = "word";
//		String cuetype = "A";
//		String cueLeft = "B";
//		//Fulltype = A
//		//CueType = B\A
//		//result type = B
//		List<Slot> goalPrecond = new ArrayList<Slot>();
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.FullType), new SlotVar(cuetype)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynCombo, cueNum, maxNumWords, cueTypeNum, maxTypes), new CCGOperator(CCGOperatorEnum.Backslash)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynString, cueNum, maxNumWords), new SlotVar(word)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynRightType, cueNum, maxNumWords, cueTypeNum, maxTypes), new SlotVar(cuetype)));
//		goalPrecond.add(new Slot(new SSlotName(SSlotNameEnum.LexsynLeftType, cueNum, maxNumWords, cueTypeNum, maxTypes), new SlotVar(cueLeft)));
//		
//		BufferConditions goal = new BufferConditions(Buffer.goal, ChunkTypeEnum.sentence, goalPrecond);
//		super.conditions.add(goal);
//		super.conditions.add(BufferQueries.checkRetrievalEmpty());
//		
//		List<Slot> effects = new ArrayList<Slot>();
//		effects.add(new Slot(new SSlotName(SSlotNameEnum.FullType), new NullValue()));
//		effects.add(new Slot(new SSlotName(SSlotNameEnum.LeftFullType), new NullValue()));
//		effects.add(new Slot(new SSlotName(SSlotNameEnum.RightFullType), new SlotVar(cueLeft)));
//		//effects.add(new Slot(new SSlotName(SSlotNameEnum.State), new GoalState(GoalStateEnum.RetrievedRule)));
//		effects.addAll(ProductionRule.wipeOut(cueNum, maxNumWords, maxTypes));
//		super.effects.add(BufferEffects.modifyGoal(effects));
//		
//		List<Slot> retr = new ArrayList<Slot>();
//		retr.add(new Slot(CCGTypeSlot.FullType, new SlotVar(cueLeft)));
//		super.effects.add(BufferEffects.makeRetrieval(ChunkTypeEnum.CCGType, retr));
//		
//		super.outputs.add(new SlotVar(word).toString()+" was added to the right");
//	}
//}
